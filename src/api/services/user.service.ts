/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createUser$Json$Json } from '../fn/user/create-user-json-json';
import { CreateUser$Json$Json$Params } from '../fn/user/create-user-json-json';
import { createUser$Json$Xml } from '../fn/user/create-user-json-xml';
import { CreateUser$Json$Xml$Params } from '../fn/user/create-user-json-xml';
import { createUser$Xml$Json } from '../fn/user/create-user-xml-json';
import { CreateUser$Xml$Json$Params } from '../fn/user/create-user-xml-json';
import { createUser$Xml$Xml } from '../fn/user/create-user-xml-xml';
import { CreateUser$Xml$Xml$Params } from '../fn/user/create-user-xml-xml';
import { createUser$XWwwFormUrlencoded$Json } from '../fn/user/create-user-x-www-form-urlencoded-json';
import { CreateUser$XWwwFormUrlencoded$Json$Params } from '../fn/user/create-user-x-www-form-urlencoded-json';
import { createUser$XWwwFormUrlencoded$Xml } from '../fn/user/create-user-x-www-form-urlencoded-xml';
import { CreateUser$XWwwFormUrlencoded$Xml$Params } from '../fn/user/create-user-x-www-form-urlencoded-xml';
import { createUsersWithListInput$Json } from '../fn/user/create-users-with-list-input-json';
import { CreateUsersWithListInput$Json$Params } from '../fn/user/create-users-with-list-input-json';
import { createUsersWithListInput$Xml } from '../fn/user/create-users-with-list-input-xml';
import { CreateUsersWithListInput$Xml$Params } from '../fn/user/create-users-with-list-input-xml';
import { deleteUser } from '../fn/user/delete-user';
import { DeleteUser$Params } from '../fn/user/delete-user';
import { getUserByName$Json } from '../fn/user/get-user-by-name-json';
import { GetUserByName$Json$Params } from '../fn/user/get-user-by-name-json';
import { getUserByName$Xml } from '../fn/user/get-user-by-name-xml';
import { GetUserByName$Xml$Params } from '../fn/user/get-user-by-name-xml';
import { loginUser$Json } from '../fn/user/login-user-json';
import { LoginUser$Json$Params } from '../fn/user/login-user-json';
import { loginUser$Xml } from '../fn/user/login-user-xml';
import { LoginUser$Xml$Params } from '../fn/user/login-user-xml';
import { logoutUser } from '../fn/user/logout-user';
import { LogoutUser$Params } from '../fn/user/logout-user';
import { updateUser$Json } from '../fn/user/update-user-json';
import { UpdateUser$Json$Params } from '../fn/user/update-user-json';
import { updateUser$Xml } from '../fn/user/update-user-xml';
import { UpdateUser$Xml$Params } from '../fn/user/update-user-xml';
import { updateUser$XWwwFormUrlencoded } from '../fn/user/update-user-x-www-form-urlencoded';
import { UpdateUser$XWwwFormUrlencoded$Params } from '../fn/user/update-user-x-www-form-urlencoded';
import { User } from '../models/user';


/**
 * Operations about user
 */
@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/user';

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$Json$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Json$Json$Response(params?: CreateUser$Json$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$Json$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Json$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Json$Json(params?: CreateUser$Json$Json$Params, context?: HttpContext): Observable<User> {
    return this.createUser$Json$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$Json$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Json$Xml$Response(params?: CreateUser$Json$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$Json$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Json$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Json$Xml(params?: CreateUser$Json$Xml$Params, context?: HttpContext): Observable<User> {
    return this.createUser$Json$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$Xml$Json()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  createUser$Xml$Json$Response(params?: CreateUser$Xml$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$Xml$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Xml$Json$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  createUser$Xml$Json(params?: CreateUser$Xml$Json$Params, context?: HttpContext): Observable<User> {
    return this.createUser$Xml$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$Xml$Xml()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  createUser$Xml$Xml$Response(params?: CreateUser$Xml$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$Xml$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Xml$Xml$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  createUser$Xml$Xml(params?: CreateUser$Xml$Xml$Params, context?: HttpContext): Observable<User> {
    return this.createUser$Xml$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$XWwwFormUrlencoded$Json()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  createUser$XWwwFormUrlencoded$Json$Response(params?: CreateUser$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$XWwwFormUrlencoded$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$XWwwFormUrlencoded$Json$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  createUser$XWwwFormUrlencoded$Json(params?: CreateUser$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<User> {
    return this.createUser$XWwwFormUrlencoded$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser$XWwwFormUrlencoded$Xml()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  createUser$XWwwFormUrlencoded$Xml$Response(params?: CreateUser$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUser$XWwwFormUrlencoded$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$XWwwFormUrlencoded$Xml$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  createUser$XWwwFormUrlencoded$Xml(params?: CreateUser$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<User> {
    return this.createUser$XWwwFormUrlencoded$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `createUsersWithListInput()` */
  static readonly CreateUsersWithListInputPath = '/user/createWithList';

  /**
   * Creates list of users with given input array.
   *
   * Creates list of users with given input array.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUsersWithListInput$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUsersWithListInput$Json$Response(params?: CreateUsersWithListInput$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUsersWithListInput$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates list of users with given input array.
   *
   * Creates list of users with given input array.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUsersWithListInput$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUsersWithListInput$Json(params?: CreateUsersWithListInput$Json$Params, context?: HttpContext): Observable<User> {
    return this.createUsersWithListInput$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Creates list of users with given input array.
   *
   * Creates list of users with given input array.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUsersWithListInput$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUsersWithListInput$Xml$Response(params?: CreateUsersWithListInput$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return createUsersWithListInput$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates list of users with given input array.
   *
   * Creates list of users with given input array.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUsersWithListInput$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUsersWithListInput$Xml(params?: CreateUsersWithListInput$Xml$Params, context?: HttpContext): Observable<User> {
    return this.createUsersWithListInput$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `loginUser()` */
  static readonly LoginUserPath = '/user/login';

  /**
   * Logs user into the system.
   *
   * Log into the system.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginUser$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUser$Xml$Response(params?: LoginUser$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return loginUser$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Logs user into the system.
   *
   * Log into the system.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginUser$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUser$Xml(params?: LoginUser$Xml$Params, context?: HttpContext): Observable<string> {
    return this.loginUser$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * Logs user into the system.
   *
   * Log into the system.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginUser$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUser$Json$Response(params?: LoginUser$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return loginUser$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Logs user into the system.
   *
   * Log into the system.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginUser$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUser$Json(params?: LoginUser$Json$Params, context?: HttpContext): Observable<string> {
    return this.loginUser$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `logoutUser()` */
  static readonly LogoutUserPath = '/user/logout';

  /**
   * Logs out current logged in user session.
   *
   * Log user out of the system.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logoutUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutUser$Response(params?: LogoutUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return logoutUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Logs out current logged in user session.
   *
   * Log user out of the system.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logoutUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutUser(params?: LogoutUser$Params, context?: HttpContext): Observable<void> {
    return this.logoutUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUserByName()` */
  static readonly GetUserByNamePath = '/user/{username}';

  /**
   * Get user by user name.
   *
   * Get user detail based on username.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByName$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName$Json$Response(params: GetUserByName$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return getUserByName$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user by user name.
   *
   * Get user detail based on username.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByName$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName$Json(params: GetUserByName$Json$Params, context?: HttpContext): Observable<User> {
    return this.getUserByName$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Get user by user name.
   *
   * Get user detail based on username.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByName$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName$Xml$Response(params: GetUserByName$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return getUserByName$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user by user name.
   *
   * Get user detail based on username.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByName$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName$Xml(params: GetUserByName$Xml$Params, context?: HttpContext): Observable<User> {
    return this.getUserByName$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/user/{username}';

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Json$Response(params: UpdateUser$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateUser$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Json(params: UpdateUser$Json$Params, context?: HttpContext): Observable<void> {
    return this.updateUser$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser$Xml()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updateUser$Xml$Response(params: UpdateUser$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateUser$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Xml$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updateUser$Xml(params: UpdateUser$Xml$Params, context?: HttpContext): Observable<void> {
    return this.updateUser$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser$XWwwFormUrlencoded()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updateUser$XWwwFormUrlencoded$Response(params: UpdateUser$XWwwFormUrlencoded$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateUser$XWwwFormUrlencoded(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$XWwwFormUrlencoded$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updateUser$XWwwFormUrlencoded(params: UpdateUser$XWwwFormUrlencoded$Params, context?: HttpContext): Observable<void> {
    return this.updateUser$XWwwFormUrlencoded$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/user/{username}';

  /**
   * Delete user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user resource.
   *
   * This can only be done by the logged in user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
