/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPet$Json$Json } from '../fn/pet/add-pet-json-json';
import { AddPet$Json$Json$Params } from '../fn/pet/add-pet-json-json';
import { addPet$Json$Xml } from '../fn/pet/add-pet-json-xml';
import { AddPet$Json$Xml$Params } from '../fn/pet/add-pet-json-xml';
import { addPet$Xml$Json } from '../fn/pet/add-pet-xml-json';
import { AddPet$Xml$Json$Params } from '../fn/pet/add-pet-xml-json';
import { addPet$Xml$Xml } from '../fn/pet/add-pet-xml-xml';
import { AddPet$Xml$Xml$Params } from '../fn/pet/add-pet-xml-xml';
import { addPet$XWwwFormUrlencoded$Json } from '../fn/pet/add-pet-x-www-form-urlencoded-json';
import { AddPet$XWwwFormUrlencoded$Json$Params } from '../fn/pet/add-pet-x-www-form-urlencoded-json';
import { addPet$XWwwFormUrlencoded$Xml } from '../fn/pet/add-pet-x-www-form-urlencoded-xml';
import { AddPet$XWwwFormUrlencoded$Xml$Params } from '../fn/pet/add-pet-x-www-form-urlencoded-xml';
import { ApiResponse } from '../models/api-response';
import { deletePet } from '../fn/pet/delete-pet';
import { DeletePet$Params } from '../fn/pet/delete-pet';
import { findPetsByStatus$Json } from '../fn/pet/find-pets-by-status-json';
import { FindPetsByStatus$Json$Params } from '../fn/pet/find-pets-by-status-json';
import { findPetsByStatus$Xml } from '../fn/pet/find-pets-by-status-xml';
import { FindPetsByStatus$Xml$Params } from '../fn/pet/find-pets-by-status-xml';
import { findPetsByTags$Json } from '../fn/pet/find-pets-by-tags-json';
import { FindPetsByTags$Json$Params } from '../fn/pet/find-pets-by-tags-json';
import { findPetsByTags$Xml } from '../fn/pet/find-pets-by-tags-xml';
import { FindPetsByTags$Xml$Params } from '../fn/pet/find-pets-by-tags-xml';
import { getPetById$Json } from '../fn/pet/get-pet-by-id-json';
import { GetPetById$Json$Params } from '../fn/pet/get-pet-by-id-json';
import { getPetById$Xml } from '../fn/pet/get-pet-by-id-xml';
import { GetPetById$Xml$Params } from '../fn/pet/get-pet-by-id-xml';
import { Pet } from '../models/pet';
import { updatePet$Json$Json } from '../fn/pet/update-pet-json-json';
import { UpdatePet$Json$Json$Params } from '../fn/pet/update-pet-json-json';
import { updatePet$Json$Xml } from '../fn/pet/update-pet-json-xml';
import { UpdatePet$Json$Xml$Params } from '../fn/pet/update-pet-json-xml';
import { updatePet$Xml$Json } from '../fn/pet/update-pet-xml-json';
import { UpdatePet$Xml$Json$Params } from '../fn/pet/update-pet-xml-json';
import { updatePet$Xml$Xml } from '../fn/pet/update-pet-xml-xml';
import { UpdatePet$Xml$Xml$Params } from '../fn/pet/update-pet-xml-xml';
import { updatePet$XWwwFormUrlencoded$Json } from '../fn/pet/update-pet-x-www-form-urlencoded-json';
import { UpdatePet$XWwwFormUrlencoded$Json$Params } from '../fn/pet/update-pet-x-www-form-urlencoded-json';
import { updatePet$XWwwFormUrlencoded$Xml } from '../fn/pet/update-pet-x-www-form-urlencoded-xml';
import { UpdatePet$XWwwFormUrlencoded$Xml$Params } from '../fn/pet/update-pet-x-www-form-urlencoded-xml';
import { updatePetWithForm$Json } from '../fn/pet/update-pet-with-form-json';
import { UpdatePetWithForm$Json$Params } from '../fn/pet/update-pet-with-form-json';
import { updatePetWithForm$Xml } from '../fn/pet/update-pet-with-form-xml';
import { UpdatePetWithForm$Xml$Params } from '../fn/pet/update-pet-with-form-xml';
import { uploadFile } from '../fn/pet/upload-file';
import { UploadFile$Params } from '../fn/pet/upload-file';


/**
 * Everything about your Pets
 */
@Injectable({ providedIn: 'root' })
export class PetService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePet()` */
  static readonly UpdatePetPath = '/pet';

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$Json$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePet$Json$Json$Response(params: UpdatePet$Json$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$Json$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$Json$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePet$Json$Json(params: UpdatePet$Json$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$Json$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$Json$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePet$Json$Xml$Response(params: UpdatePet$Json$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$Json$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$Json$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePet$Json$Xml(params: UpdatePet$Json$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$Json$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$Xml$Json()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updatePet$Xml$Json$Response(params: UpdatePet$Xml$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$Xml$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$Xml$Json$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updatePet$Xml$Json(params: UpdatePet$Xml$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$Xml$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$Xml$Xml()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updatePet$Xml$Xml$Response(params: UpdatePet$Xml$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$Xml$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$Xml$Xml$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  updatePet$Xml$Xml(params: UpdatePet$Xml$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$Xml$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$XWwwFormUrlencoded$Json()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updatePet$XWwwFormUrlencoded$Json$Response(params: UpdatePet$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$XWwwFormUrlencoded$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$XWwwFormUrlencoded$Json$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updatePet$XWwwFormUrlencoded$Json(params: UpdatePet$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$XWwwFormUrlencoded$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePet$XWwwFormUrlencoded$Xml()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updatePet$XWwwFormUrlencoded$Xml$Response(params: UpdatePet$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePet$XWwwFormUrlencoded$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing pet.
   *
   * Update an existing pet by Id.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePet$XWwwFormUrlencoded$Xml$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  updatePet$XWwwFormUrlencoded$Xml(params: UpdatePet$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePet$XWwwFormUrlencoded$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /** Path part for operation `addPet()` */
  static readonly AddPetPath = '/pet';

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$Json$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPet$Json$Json$Response(params: AddPet$Json$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$Json$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$Json$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPet$Json$Json(params: AddPet$Json$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$Json$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$Json$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPet$Json$Xml$Response(params: AddPet$Json$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$Json$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$Json$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPet$Json$Xml(params: AddPet$Json$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$Json$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$Xml$Json()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  addPet$Xml$Json$Response(params: AddPet$Xml$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$Xml$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$Xml$Json$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  addPet$Xml$Json(params: AddPet$Xml$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$Xml$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$Xml$Xml()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  addPet$Xml$Xml$Response(params: AddPet$Xml$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$Xml$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$Xml$Xml$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  addPet$Xml$Xml(params: AddPet$Xml$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$Xml$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$XWwwFormUrlencoded$Json()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  addPet$XWwwFormUrlencoded$Json$Response(params: AddPet$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$XWwwFormUrlencoded$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$XWwwFormUrlencoded$Json$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  addPet$XWwwFormUrlencoded$Json(params: AddPet$XWwwFormUrlencoded$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$XWwwFormUrlencoded$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPet$XWwwFormUrlencoded$Xml()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  addPet$XWwwFormUrlencoded$Xml$Response(params: AddPet$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return addPet$XWwwFormUrlencoded$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new pet to the store.
   *
   * Add a new pet to the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPet$XWwwFormUrlencoded$Xml$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  addPet$XWwwFormUrlencoded$Xml(params: AddPet$XWwwFormUrlencoded$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.addPet$XWwwFormUrlencoded$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /** Path part for operation `findPetsByStatus()` */
  static readonly FindPetsByStatusPath = '/pet/findByStatus';

  /**
   * Finds Pets by status.
   *
   * Multiple status values can be provided with comma separated strings.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPetsByStatus$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByStatus$Json$Response(params?: FindPetsByStatus$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pet>>> {
    return findPetsByStatus$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Finds Pets by status.
   *
   * Multiple status values can be provided with comma separated strings.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPetsByStatus$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByStatus$Json(params?: FindPetsByStatus$Json$Params, context?: HttpContext): Observable<Array<Pet>> {
    return this.findPetsByStatus$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pet>>): Array<Pet> => r.body)
    );
  }

  /**
   * Finds Pets by status.
   *
   * Multiple status values can be provided with comma separated strings.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPetsByStatus$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByStatus$Xml$Response(params?: FindPetsByStatus$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pet>>> {
    return findPetsByStatus$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Finds Pets by status.
   *
   * Multiple status values can be provided with comma separated strings.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPetsByStatus$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByStatus$Xml(params?: FindPetsByStatus$Xml$Params, context?: HttpContext): Observable<Array<Pet>> {
    return this.findPetsByStatus$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pet>>): Array<Pet> => r.body)
    );
  }

  /** Path part for operation `findPetsByTags()` */
  static readonly FindPetsByTagsPath = '/pet/findByTags';

  /**
   * Finds Pets by tags.
   *
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPetsByTags$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByTags$Json$Response(params?: FindPetsByTags$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pet>>> {
    return findPetsByTags$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Finds Pets by tags.
   *
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPetsByTags$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByTags$Json(params?: FindPetsByTags$Json$Params, context?: HttpContext): Observable<Array<Pet>> {
    return this.findPetsByTags$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pet>>): Array<Pet> => r.body)
    );
  }

  /**
   * Finds Pets by tags.
   *
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPetsByTags$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByTags$Xml$Response(params?: FindPetsByTags$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Pet>>> {
    return findPetsByTags$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Finds Pets by tags.
   *
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPetsByTags$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPetsByTags$Xml(params?: FindPetsByTags$Xml$Params, context?: HttpContext): Observable<Array<Pet>> {
    return this.findPetsByTags$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Pet>>): Array<Pet> => r.body)
    );
  }

  /** Path part for operation `getPetById()` */
  static readonly GetPetByIdPath = '/pet/{petId}';

  /**
   * Find pet by ID.
   *
   * Returns a single pet.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPetById$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPetById$Json$Response(params: GetPetById$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return getPetById$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Find pet by ID.
   *
   * Returns a single pet.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPetById$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPetById$Json(params: GetPetById$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.getPetById$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Find pet by ID.
   *
   * Returns a single pet.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPetById$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPetById$Xml$Response(params: GetPetById$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return getPetById$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Find pet by ID.
   *
   * Returns a single pet.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPetById$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPetById$Xml(params: GetPetById$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.getPetById$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /** Path part for operation `updatePetWithForm()` */
  static readonly UpdatePetWithFormPath = '/pet/{petId}';

  /**
   * Updates a pet in the store with form data.
   *
   * Updates a pet resource based on the form data.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePetWithForm$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePetWithForm$Json$Response(params: UpdatePetWithForm$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePetWithForm$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a pet in the store with form data.
   *
   * Updates a pet resource based on the form data.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePetWithForm$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePetWithForm$Json(params: UpdatePetWithForm$Json$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePetWithForm$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /**
   * Updates a pet in the store with form data.
   *
   * Updates a pet resource based on the form data.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePetWithForm$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePetWithForm$Xml$Response(params: UpdatePetWithForm$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Pet>> {
    return updatePetWithForm$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a pet in the store with form data.
   *
   * Updates a pet resource based on the form data.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePetWithForm$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePetWithForm$Xml(params: UpdatePetWithForm$Xml$Params, context?: HttpContext): Observable<Pet> {
    return this.updatePetWithForm$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Pet>): Pet => r.body)
    );
  }

  /** Path part for operation `deletePet()` */
  static readonly DeletePetPath = '/pet/{petId}';

  /**
   * Deletes a pet.
   *
   * Delete a pet.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePet()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePet$Response(params: DeletePet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePet(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a pet.
   *
   * Delete a pet.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePet(params: DeletePet$Params, context?: HttpContext): Observable<void> {
    return this.deletePet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadFile()` */
  static readonly UploadFilePath = '/pet/{petId}/uploadImage';

  /**
   * Uploads an image.
   *
   * Upload image of the pet.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile()` instead.
   *
   * This method sends `application/octet-stream` and handles request body of type `application/octet-stream`.
   */
  uploadFile$Response(params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return uploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Uploads an image.
   *
   * Upload image of the pet.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile$Response()` instead.
   *
   * This method sends `application/octet-stream` and handles request body of type `application/octet-stream`.
   */
  uploadFile(params: UploadFile$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.uploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

}
