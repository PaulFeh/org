/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteOrder } from '../fn/store/delete-order';
import { DeleteOrder$Params } from '../fn/store/delete-order';
import { getInventory } from '../fn/store/get-inventory';
import { GetInventory$Params } from '../fn/store/get-inventory';
import { getOrderById$Json } from '../fn/store/get-order-by-id-json';
import { GetOrderById$Json$Params } from '../fn/store/get-order-by-id-json';
import { getOrderById$Xml } from '../fn/store/get-order-by-id-xml';
import { GetOrderById$Xml$Params } from '../fn/store/get-order-by-id-xml';
import { Order } from '../models/order';
import { placeOrder$Json } from '../fn/store/place-order-json';
import { PlaceOrder$Json$Params } from '../fn/store/place-order-json';
import { placeOrder$Xml } from '../fn/store/place-order-xml';
import { PlaceOrder$Xml$Params } from '../fn/store/place-order-xml';
import { placeOrder$XWwwFormUrlencoded } from '../fn/store/place-order-x-www-form-urlencoded';
import { PlaceOrder$XWwwFormUrlencoded$Params } from '../fn/store/place-order-x-www-form-urlencoded';


/**
 * Access to Petstore orders
 */
@Injectable({ providedIn: 'root' })
export class StoreService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getInventory()` */
  static readonly GetInventoryPath = '/store/inventory';

  /**
   * Returns pet inventories by status.
   *
   * Returns a map of status codes to quantities.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInventory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInventory$Response(params?: GetInventory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getInventory(this.http, this.rootUrl, params, context);
  }

  /**
   * Returns pet inventories by status.
   *
   * Returns a map of status codes to quantities.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInventory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInventory(params?: GetInventory$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getInventory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `placeOrder()` */
  static readonly PlaceOrderPath = '/store/order';

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `placeOrder$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  placeOrder$Json$Response(params?: PlaceOrder$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return placeOrder$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `placeOrder$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  placeOrder$Json(params?: PlaceOrder$Json$Params, context?: HttpContext): Observable<Order> {
    return this.placeOrder$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `placeOrder$Xml()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  placeOrder$Xml$Response(params?: PlaceOrder$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return placeOrder$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `placeOrder$Xml$Response()` instead.
   *
   * This method sends `application/xml` and handles request body of type `application/xml`.
   */
  placeOrder$Xml(params?: PlaceOrder$Xml$Params, context?: HttpContext): Observable<Order> {
    return this.placeOrder$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `placeOrder$XWwwFormUrlencoded()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  placeOrder$XWwwFormUrlencoded$Response(params?: PlaceOrder$XWwwFormUrlencoded$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return placeOrder$XWwwFormUrlencoded(this.http, this.rootUrl, params, context);
  }

  /**
   * Place an order for a pet.
   *
   * Place a new order in the store.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `placeOrder$XWwwFormUrlencoded$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  placeOrder$XWwwFormUrlencoded(params?: PlaceOrder$XWwwFormUrlencoded$Params, context?: HttpContext): Observable<Order> {
    return this.placeOrder$XWwwFormUrlencoded$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /** Path part for operation `getOrderById()` */
  static readonly GetOrderByIdPath = '/store/order/{orderId}';

  /**
   * Find purchase order by ID.
   *
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrderById$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderById$Json$Response(params: GetOrderById$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return getOrderById$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Find purchase order by ID.
   *
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrderById$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderById$Json(params: GetOrderById$Json$Params, context?: HttpContext): Observable<Order> {
    return this.getOrderById$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /**
   * Find purchase order by ID.
   *
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrderById$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderById$Xml$Response(params: GetOrderById$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return getOrderById$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Find purchase order by ID.
   *
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrderById$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderById$Xml(params: GetOrderById$Xml$Params, context?: HttpContext): Observable<Order> {
    return this.getOrderById$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /** Path part for operation `deleteOrder()` */
  static readonly DeleteOrderPath = '/store/order/{orderId}';

  /**
   * Delete purchase order by identifier.
   *
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrder$Response(params: DeleteOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete purchase order by identifier.
   *
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrder(params: DeleteOrder$Params, context?: HttpContext): Observable<void> {
    return this.deleteOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
